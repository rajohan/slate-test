const withMarkdown = (editor: ReactEditor) => {
//     const { insertText, deleteBackward } = editor;
//
//     editor.insertText = (text) => {
//         const { selection } = editor;
//
//         if (text === " " && selection && Range.isCollapsed(selection)) {
//             const { anchor } = selection;
//
//             const block = Editor.above(editor, {
//                 match: (n) => Editor.isBlock(editor, n),
//             });
//
//             const path = block ? block[1] : [];
//             const start = Editor.start(editor, path);
//             const range = { anchor, focus: start };
//             const beforeText = Editor.string(editor, range);
//
//             const fragment: any = unified()
//                 .use(markdown)
//                 .use(remarkSlate)
//                 .processSync(beforeText);
//
//             if (fragment.result.length === 0) return;
//
//             if (fragment.result[0].type && fragment.result[0].type !== "paragraph") {
//                 Transforms.select(editor, range);
//                 Transforms.delete(editor);
//
//                 console.log(fragment.result[0].type);
//
//                 Transforms.setNodes(
//                     editor,
//                     { type: fragment.result[0].type },
//                     {
//                         match: (n) => Editor.isBlock(editor, n),
//                     }
//                 );
//
//                 return;
//             }
//         }
//
//         insertText(text);
//     };
//
//     editor.deleteBackward = (...args) => {
//         const { selection } = editor;
//
//         if (selection && Range.isCollapsed(selection)) {
//             const match = Editor.above(editor, {
//                 match: (n) => Editor.isBlock(editor, n),
//             });
//
//             if (match) {
//                 const [block, path] = match;
//                 const start = Editor.start(editor, path);
//
//                 if (
//                     !Editor.isEditor(block) &&
//                     Element.isElement(block) &&
//                     block.type !== "paragraph" &&
//                     Point.equals(selection.anchor, start)
//                 ) {
//                     const newProperties: Partial<Element> = {
//                         type: "paragraph",
//                     };
//                     Transforms.setNodes(editor, newProperties);
//
//                     if (block.type === "list-item") {
//                         Transforms.unwrapNodes(editor, {
//                             match: (n) =>
//                                 !Editor.isEditor(n) &&
//                                 Element.isElement(n) &&
//                                 n.type === "bulleted-list",
//                             split: true,
//                         });
//                     }
//
//                     return;
//                 }
//             }
//
//             deleteBackward(...args);
//         }
//     };
//
//     //
//     // editor.insertData = (data) => {
//     //     const content = data.getData("text/plain");
//     //
//     //     if (content) {
//     //         const fragment: any = unified()
//     //             .use(markdown)
//     //             .use(remarkSlate)
//     //             .processSync(content);
//     //
//     //         if (fragment.result.length === 0) return;
//     //
//     //         if (fragment.result[0].type) {
//     //             Transforms.setNodes(editor, { type: fragment.result[0].type });
//     //         }
//     //
//     //         Transforms.insertFragment(editor, fragment.result);
//     //
//     //         return;
//     //     }
//     //
//     //     insertData(content as any);
//     // };
//
//     return editor;
// };

Note: mod represents the Command key on Mac and the Control key on Windows.
